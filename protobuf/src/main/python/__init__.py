# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: orders.proto, table.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Order(betterproto.Message):
    col1: int = betterproto.int64_field(1)
    col2: str = betterproto.string_field(2)
    col3: str = betterproto.string_field(3)
    col4: str = betterproto.string_field(4)
    col5: str = betterproto.string_field(5)
    col6: str = betterproto.string_field(6)
    col7: str = betterproto.string_field(7)
    col8: str = betterproto.string_field(8)
    col9: str = betterproto.string_field(9)
    col10: str = betterproto.string_field(10)
    col11: float = betterproto.float_field(11)
    col12: float = betterproto.float_field(12)
    col13: float = betterproto.float_field(13)
    col14: float = betterproto.float_field(14)
    col15: float = betterproto.float_field(15)
    col16: float = betterproto.float_field(16)
    col17: float = betterproto.float_field(17)
    col18: float = betterproto.float_field(18)
    col19: float = betterproto.float_field(19)
    col20: float = betterproto.float_field(20)
    col21: float = betterproto.float_field(21)
    col22: float = betterproto.float_field(22)
    col23: float = betterproto.float_field(23)
    col24: float = betterproto.float_field(24)
    col25: float = betterproto.float_field(25)
    col26: float = betterproto.float_field(26)
    col27: float = betterproto.float_field(27)
    col28: float = betterproto.float_field(28)
    col29: float = betterproto.float_field(29)
    col30: float = betterproto.float_field(30)
    col31: float = betterproto.float_field(31)
    col32: float = betterproto.float_field(32)
    col33: float = betterproto.float_field(33)
    col34: float = betterproto.float_field(34)
    col35: float = betterproto.float_field(35)
    col36: float = betterproto.float_field(36)
    col37: float = betterproto.float_field(37)
    col38: float = betterproto.float_field(38)
    col39: float = betterproto.float_field(39)
    col40: float = betterproto.float_field(40)
    col41: float = betterproto.float_field(41)
    col42: float = betterproto.float_field(42)
    col43: float = betterproto.float_field(43)
    col44: float = betterproto.float_field(44)
    col45: float = betterproto.float_field(45)
    col46: float = betterproto.float_field(46)
    col47: float = betterproto.float_field(47)
    col48: float = betterproto.float_field(48)
    col49: float = betterproto.float_field(49)
    col50: float = betterproto.float_field(50)
    col51: float = betterproto.float_field(51)
    col52: float = betterproto.float_field(52)
    col53: float = betterproto.float_field(53)
    col54: float = betterproto.float_field(54)
    col55: float = betterproto.float_field(55)
    col56: float = betterproto.float_field(56)
    col57: float = betterproto.float_field(57)
    col58: float = betterproto.float_field(58)
    col59: float = betterproto.float_field(59)
    col60: float = betterproto.float_field(60)
    col61: float = betterproto.float_field(61)
    col62: float = betterproto.float_field(62)
    col63: float = betterproto.float_field(63)
    col64: float = betterproto.float_field(64)
    col65: float = betterproto.float_field(65)
    col66: float = betterproto.float_field(66)
    col67: float = betterproto.float_field(67)
    col68: float = betterproto.float_field(68)
    col69: float = betterproto.float_field(69)
    col70: float = betterproto.float_field(70)
    col71: float = betterproto.float_field(71)
    col72: float = betterproto.float_field(72)
    col73: float = betterproto.float_field(73)
    col74: float = betterproto.float_field(74)
    col75: float = betterproto.float_field(75)
    col76: float = betterproto.float_field(76)
    col77: float = betterproto.float_field(77)
    col78: float = betterproto.float_field(78)
    col79: float = betterproto.float_field(79)
    col80: float = betterproto.float_field(80)
    col81: float = betterproto.float_field(81)
    col82: float = betterproto.float_field(82)
    col83: float = betterproto.float_field(83)
    col84: float = betterproto.float_field(84)
    col85: float = betterproto.float_field(85)
    col86: float = betterproto.float_field(86)
    col87: float = betterproto.float_field(87)
    col88: float = betterproto.float_field(88)
    col89: float = betterproto.float_field(89)
    col90: float = betterproto.float_field(90)
    col91: float = betterproto.float_field(91)
    col92: float = betterproto.float_field(92)
    col93: float = betterproto.float_field(93)
    col94: float = betterproto.float_field(94)
    col95: float = betterproto.float_field(95)
    col96: float = betterproto.float_field(96)
    col97: float = betterproto.float_field(97)
    col98: float = betterproto.float_field(98)
    col99: float = betterproto.float_field(99)
    col100: float = betterproto.float_field(100)


@dataclass(eq=False, repr=False)
class OrderRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class OrderResponse(betterproto.Message):
    orders: List["Order"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Row(betterproto.Message):
    values: List["Cell"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Cell(betterproto.Message):
    float_val: float = betterproto.float_field(1, group="value")
    int_val: int = betterproto.int64_field(2, group="value")
    string_val: str = betterproto.string_field(3, group="value")


@dataclass(eq=False, repr=False)
class RowBasedTable(betterproto.Message):
    column_names: List[str] = betterproto.string_field(1)
    rows: List["Row"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Column(betterproto.Message):
    name: str = betterproto.string_field(1)
    float_column: "FloatColumn" = betterproto.message_field(2, group="values")
    int_column: "IntColumn" = betterproto.message_field(3, group="values")
    string_column: "StringColumn" = betterproto.message_field(4, group="values")


@dataclass(eq=False, repr=False)
class IntColumn(betterproto.Message):
    values: List[int] = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class StringColumn(betterproto.Message):
    values: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class FloatColumn(betterproto.Message):
    values: List[float] = betterproto.float_field(1)


@dataclass(eq=False, repr=False)
class ColumnBasedTable(betterproto.Message):
    cols: List["Column"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TableRequest(betterproto.Message):
    name: str = betterproto.string_field(1)


class OrdersStub(betterproto.ServiceStub):
    async def get_orders(
        self,
        order_request: "OrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "OrderResponse":
        return await self._unary_unary(
            "/Orders/GetOrders",
            order_request,
            OrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_orders_stream(
        self,
        order_request: "OrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["Order"]:
        async for response in self._unary_stream(
            "/Orders/GetOrdersStream",
            order_request,
            Order,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class TablesStub(betterproto.ServiceStub):
    async def get_row_table(
        self,
        table_request: "TableRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RowBasedTable":
        return await self._unary_unary(
            "/Tables/GetRowTable",
            table_request,
            RowBasedTable,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_column_table(
        self,
        table_request: "TableRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ColumnBasedTable":
        return await self._unary_unary(
            "/Tables/GetColumnTable",
            table_request,
            ColumnBasedTable,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class OrdersBase(ServiceBase):
    async def get_orders(self, order_request: "OrderRequest") -> "OrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_orders_stream(
        self, order_request: "OrderRequest"
    ) -> AsyncIterator["Order"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_orders(
        self, stream: "grpclib.server.Stream[OrderRequest, OrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_orders(request)
        await stream.send_message(response)

    async def __rpc_get_orders_stream(
        self, stream: "grpclib.server.Stream[OrderRequest, Order]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_orders_stream,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/Orders/GetOrders": grpclib.const.Handler(
                self.__rpc_get_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                OrderRequest,
                OrderResponse,
            ),
            "/Orders/GetOrdersStream": grpclib.const.Handler(
                self.__rpc_get_orders_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                OrderRequest,
                Order,
            ),
        }


class TablesBase(ServiceBase):
    async def get_row_table(self, table_request: "TableRequest") -> "RowBasedTable":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_column_table(
        self, table_request: "TableRequest"
    ) -> "ColumnBasedTable":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_row_table(
        self, stream: "grpclib.server.Stream[TableRequest, RowBasedTable]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_row_table(request)
        await stream.send_message(response)

    async def __rpc_get_column_table(
        self, stream: "grpclib.server.Stream[TableRequest, ColumnBasedTable]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_column_table(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/Tables/GetRowTable": grpclib.const.Handler(
                self.__rpc_get_row_table,
                grpclib.const.Cardinality.UNARY_UNARY,
                TableRequest,
                RowBasedTable,
            ),
            "/Tables/GetColumnTable": grpclib.const.Handler(
                self.__rpc_get_column_table,
                grpclib.const.Cardinality.UNARY_UNARY,
                TableRequest,
                ColumnBasedTable,
            ),
        }
